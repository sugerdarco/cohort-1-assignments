/**
 You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
 - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
 - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

 Each todo has a title and a description. The title is a string and the description is a string.
 Each todo should also get an unique autogenerated id every time it is created
 The expected API endpoints are defined below,
 1.GET /todos - Retrieve all todo items
 Description: Returns a list of all todo items.
 Response: 200 OK with an array of todo items in JSON format.
 Example: GET http://localhost:3000/todos

 2.GET /todos/:id - Retrieve a specific todo item by ID
 Description: Returns a specific todo item identified by its ID.
 Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
 Example: GET http://localhost:3000/todos/123

 3. POST /todos - Create a new todo item
 Description: Creates a new todo item.
 Request Body: JSON object representing the todo item.
 Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
 Example: POST http://localhost:3000/todos
 Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }

 4. PUT /todos/:id - Update an existing todo item by ID
 Description: Updates an existing todo item identified by its ID.
 Request Body: JSON object representing the updated todo item.
 Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
 Example: PUT http://localhost:3000/todos/123
 Request Body: { "title": "Buy groceries", "completed": true }

 5. DELETE /todos/:id - Delete a todo item by ID
 Description: Deletes a todo item identified by its ID.
 Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
 Example: DELETE http://localhost:3000/todos/123

 - For any other route not defined in the server return 404

 Testing the server - run `npm run test-todoServer` command in terminal
 */

import express from "express";
import {v4 as uuidv4} from "uuid";
import {readdir, readFile, writeFile, unlink} from "fs/promises";
import path from "path";
import {fileURLToPath} from "url";
import cors from "cors";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
const todosDirectory = path.join(__dirname, "todos");

app.use(cors({
    origin: "*"
}))
app.use(express.json());

/**
 const todos = [];

 app.get("/todos", (req, res) => {
 todos.map(todo => todo = {title: todo.title,  description: todo.description})
 return res.json({
 message: "todos fetched successfully",
 todos: todos,
 });
 });

 app.get("/todos/:id", (req, res) => {
 const todo = todos.find(t => t.id === req.params.id);
 if (!todo) {
 return res.status(404).json({message: 'No todos found.'});
 }
 return res.status(200).json({
 message: "todo found",
 todo: todo,
 });
 });

 app.post("/todos", (req, res) => {
 const { title, description } = req.body;

 if (!title || !description) {
 return res.status(400).json({message: "Missing title or description"});
 }

 const todo = {
 id: uuidv4(),
 title: title,
 description: description
 }

 todos.push(todo);
 return res.status(200).json({
 message: "todo added successfully",
 newTodo: todo
 });
 });

 app.put("/todos/:id", (req, res) => {
 const { id } = req.params;
 const todoIndex = todos.findIndex(todo => todo.id === id);
 if (todoIndex < 0) {
 return res.status(404).json({message: 'No todos found.'});
 }

 const { title, description } = req.body;
 if (!title && !description) {
 return res.status(400).json({message: "Missing title and/or description"});
 }

 if (title) {
 todos[todoIndex].title = title;
 }
 if (description) {
 todos[todoIndex].description = description;
 }
 return res.status(200).json({
 message: "todo updated successfully",
 UpdatedTodo: todos[todoIndex],
 });
 });

 app.delete("/todos/:id", (req, res) => {
 const { id } = req.params;
 const todoIndex = todos.findIndex(t => t.id === id);
 if (todoIndex < 0) {
 return res.status(404).json({message: 'No todos found.'});
 }
 const todo = todos[todoIndex];
 todos.splice(todoIndex, 1);

 return res.status(200).json({
 message: "todo deleted successfully",
 deletedTodo: todo,
 })
 })
 */


const custom_readFile = async (filename) => {
  const file_path = path.join(todosDirectory, filename);
  const todo_content = await readFile(file_path, 'utf8');

  const todo = {};

  const lines = todo_content.split("\n");
  lines.forEach((line) => {
    const [key, value] = line.split(":").map(part => part.trim());
    todo["id"] = filename;
    todo[key] = value;
  });
  return todo;
}

app.get("/todos", async (req, res) => {

  const todos_list = await readdir(todosDirectory);
  const todos = [];

  for (const todo_id of todos_list) {
      const todo = await custom_readFile(todo_id);
      todos.push(todo);
  }

  return res.json({
    message: "todos fetched successfully",
    todos: todos,
  });
});

app.get("/todos/:id", async (req, res) => {
  const { id } = req.params;
  const todos = await readdir(todosDirectory);
  if (!todos.includes(id)) {
    return res.status(404).json({message: 'No todos found.'});
  }

  const todo = await custom_readFile(id);

  return res.status(200).json({
    message: "todo found",
    todo: {
      id: id,
      title: todo.title,
      description: todo.description,
    }
  });
});

app.post("/todos", async (req, res) => {
  const { title, description } = req.body;

  if (!title || !description) {
    return res.status(400).json({message: "Missing title or description"});
  }

  const todo_id = uuidv4();
  const todo_path = `${todosDirectory}/${todo_id}`
  const todo = `title: ${title}\n description: ${description}`;

  await writeFile(todo_path, todo, {flag: "w"});
  return res.status(200).json({
    message: "todo added successfully",
    newTodo: {
      id: todo_id,
      title: title,
      description: description,
    }
  });
});

app.put("/todos/:id", async (req, res) => {
  const { id } = req.params;
  const todos = await readdir(todosDirectory);
  if (!todos.includes(id)) {
    return res.status(404).json({message: 'No todos found.'});
  }

  const { title, description } = req.body;
  if (!title && !description) {
    return res.status(400).json({message: "Missing title and/or description"});
  }

  const existingTodo = await custom_readFile(id);
  const updatedTodo = `title: ${title ? title : existingTodo.title}\ndescription: ${description ? description : existingTodo.description}`;

  const todo_path = path.join(todosDirectory, id);
  await writeFile(todo_path, updatedTodo, {flag: "w"});

  return res.status(200).json({
    message: "todo updated successfully",
    updatedTodo: {
      id: id,
      title: title || existingTodo.title,
      description: description || existingTodo.description
    }
  });
});

app.delete("/todos/:id", async (req, res) => {
  const { id } = req.params;
  const todos = await readdir(todosDirectory);
  if (!todos.includes(id)) {
    return res.status(404).json({message: 'No todos found.'});
  }

  const deletedTodo = await custom_readFile(id);

  const todo_path = path.join(todosDirectory, id);
  await unlink(todo_path);

  return res.status(200).json({
    message: "todo deleted successfully",
    deletedTodo: {
      id: id,
      title: deletedTodo.title,
      description: deletedTodo.description
    }
  });
});

app.use((req, res) => {
  res.status(404).json({ message: 'Not Found' });
});

// export default app;

app.listen(3000, () => {
    console.log("Server started on port 3000");
})